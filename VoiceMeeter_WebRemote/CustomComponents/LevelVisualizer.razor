@using VoiceMeeter
@inherits NotificationComponent
<div class="hstack" style="margin-right:20px;">
    @for (var i = 0; i < Channels; i++){
        <div class="visualizer" style="width:10px;border-color: @GetColor(i); background: linear-gradient(to top, @GetColor(i) @InLineConverter.ToPercent(ConvertLevelToPercentage(ChannelValues[0])), transparent @InLineConverter.ToPercent(ConvertLevelToPercentage(ChannelValues[0]))); @Style" />
    }

</div>
@code {
    [Parameter]
    public int Channels { get; set; }
    [Parameter]
    public int StartChannel { get; set; }
    [Parameter]
    public Voicemeeter.LevelType levelType { get; set; }

    public string ControlColor => "Red";
    private float[] ChannelValues;
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        ChannelValues = new float[Channels];

        var channels = new List<Voicemeeter.Levels.Channel>();
        for(var i=StartChannel; i<(StartChannel+Channels); i++)
            channels.Add(new Voicemeeter.Levels.Channel
                {
                         LevelType = levelType,
                         ChannelNumber = i
                     });


        var results = new List<float>();
        var levels = new Voicemeeter.Levels(channels.ToArray(), 100);
        var subscription = levels.Subscribe(x => SetValue(x));


    }
    public static int ConvertLevelToPercentage(float value)
    {
        if (value <= 0)
            return 0; // handle cases where the level is 0 (or close to 0)

        // Apply a logarithmic scale to the value
        // Map the value from 0.0-1.0 to a range suitable for a percentage (0-100)
        double dB = 20 * Math.Log10(value); // Convert to dB scale
        var x = (dB + 100) ;
        var x2 = (x) * (x / 100);
        double percentage = Math.Max(0, Math.Min(100, x2)); // Map dB to 0-100 range

        return (int)percentage;
    }

    public void SetValue(float[] vals)
    {
        for (var i = 0; i < ChannelValues.Length; i++)
        {
            if (vals[i] >= 0)
                ChannelValues[i] = (vals[i] + ChannelValues[i]) / 2;
            else
                ChannelValues[i] = ChannelValues[i]/2;

           

            }
          
        InvokeAsync(() =>
       {
           StateHasChanged(); // Refresh UI
       });
    }

    public string GetColor(int index){
        if (ChannelValues?.Length <= index) return "orange";
        var percent = ConvertLevelToPercentage(ChannelValues[index]);
        if (percent < 60) return "grey";
        if (percent < 95) return "green";
        return "red";
    }

}

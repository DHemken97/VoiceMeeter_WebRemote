@using System.Drawing
<section id="outerRing" style="border-color: @color;" draggable="true" @ondrag="OnDrag" @ondragend="OnDragEnd" @ondblclick="OnDoubleClick">
    <div id="dot" style="left:@left%;top:@top%" />
    <p class="knobLabel grabbable" draggable="true" @ondrag="OnDrag" @ondragend="OnDragEnd" @ondblclick="OnDoubleClick">@Value</p>
</section>

@code {
    [Parameter]
    public double Value
    {
        get => _value;
        set
        {
            _value = value;
            CalculatePosition();
            CalculateColor();
            StateHasChanged();
        }
    }
    private double _value;

    // Local state for this knob
    private double left { get; set; }
    private double top { get; set; }
    private string color { get; set; } 
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        CalculatePosition();
    }
    protected void CalculateColor(){
        if (Value > 0)
            color = "#5c9f85";
        else
            color = "#455c6e";


    }
    protected void CalculatePosition()
    {
        var radiusTop = 50; // 25% for vertical radius
        var radiusLeft = 35; // 35% for horizontal radius
        var centerTop = 100; // Center point for top
        var centerLeft = 45; // Center point for left
        var x = 1 - (Value * 0.1);
        var angle = x * Math.PI; // Convert to radians (0 to π)

        top = (centerTop - radiusTop * Math.Sin(angle)); // Calculate top position
        left = (centerLeft + radiusLeft * Math.Cos(angle)); // Calculate left position
    }

    public bool IsDragging { get; set; }
    public Point DragPoint { get; set; }
    public double DragValue { get; set; }

    private void OnDrag(DragEventArgs e)
    {
        if (e.ClientY < 1) return;


        if (!IsDragging)
        {
            DragPoint = new Point((int)e.ClientX, (int)e.ClientY);
            IsDragging = true;
            DragValue = Value;
        }

        // Calculate new value based on the drag distance
        var change = (e.ClientY - DragPoint.Y) * 0.1;
        var newValue = Math.Round(DragValue - change, 1);

        // Clamp value between 0 and 10
        Value = newValue < 0 ? 0 : (newValue > 10) ? 10 : newValue;
    }

    private void OnDragEnd(DragEventArgs e)
    {
        IsDragging = false;
        StateHasChanged(); // Re-render the component
    }

    private void OnDoubleClick(MouseEventArgs e)
    {
        Value = 0; // Reset value on double-click
    }
}
